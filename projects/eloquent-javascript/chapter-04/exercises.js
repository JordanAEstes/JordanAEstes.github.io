////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = 1) {
  //using a for loop, add all numbers from start to end to an array
  var rangeArray = [];
  if (step < 0){
    return rangeArray;
  }
  if(start === end){ return rangeArray}
  if(start < end){
    for (var i = start; i <= end; i += step){
     rangeArray.push(i); 
    }
  } else {
    for (var i = start; i >= end; i -= step){
        rangeArray.push(i);
    }
  }
  return rangeArray;
}



////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(sumArray) {
//use for loop to iterate through array and add the values stored within
var finalSum = 0;
if (sumArray.length === 0){return finalSum}

for (var i = 0; i < sumArray.length; i++){
  finalSum += sumArray[i]
}
return finalSum;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arrayToRev) {
// use for loop to iterate over an array and create a new array in reversed order
  var reversedArray = [];
  for (var i = arrayToRev.length - 1; i >= 0; i--){
    reversedArray.push(arrayToRev[i]);
  }
  return reversedArray;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arrayVal) {
  // get length of arrayVal
  var count = arrayVal.length - 1;
  // loop with for loop
  for (var i = count; i > 0; i--){
    //using splice and shift put the values in the reverse order
    arrayVal.splice(i, 0, arrayVal.shift());
  }
  //return arrayVal
  return arrayVal;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
//loop through array and put its contents into lists
var list = null;
  for (var i = array.length - 1; i >= 0; i--){
    list = {
    value: array[i],
    rest: list
    };
  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  //create a blank array
  var arr = [];
  //use a for loop to iterate through the list and push the values into an array
  for (var listItem = list; listItem; listItem = listItem.rest){
    arr.push(listItem.value);
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(newVal, list) {
  return {
    value: newVal,
    rest: list
  }
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, num) {
  if (!list){
    return undefined;
  } else if (num === 0){
    return list.value;
  } else {
    return nth(list.rest, num - 1);
  }

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(valOne, valTwo) {
  //check if values directly equal each other
  if (valOne === valTwo){
    return true;
    //check to make sure both values are objects that are not null
  } else if ( (typeof valOne == "object" && valOne != null) && (typeof valTwo == "object" && valTwo != null) ){
      // if the objects values lengths are not equal return false
      if(Object.keys(valOne).length != Object.keys(valTwo).length){
       return false;}
        // loop through valOne and compare properties with the properties of valTwo
        for (var prop in valOne){
          if (valTwo.hasOwnProperty(prop)){
            //if the properties dont match return false
           if (! deepEqual(valOne[prop], valTwo[prop])){
              return false;
            }
            // else return false
          } else {
        return false;
          }
        
        }
        //if it makes it here return true;
      return true;
    } else{
      //if the values are not objects or are null return false.
      return false;
    }
  }


////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
